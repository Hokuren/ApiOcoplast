 #               new_weight = lot_weight - weight
  #               puts "-->>> Entro al if de costos <<<---"
  #               puts "previous_cost_kilo_phase: #{ previous_cost_kilo_phase } = ( lot_cost #{ lot_cost } / lot_weight #{ lot_weight }) "
  #               puts "( previous_cost_kilo_phase: #{ previous_cost_kilo_phase } + cost_treatments #{ cost_treatments } ) / #{ weight }"
  #               puts "new_weight: #{ new_weight } lot_weight: #{ lot_weight } - weight: #{ weight }"
  #
  #               #acutaliza el cost y weight la fase 0 
  #               ProductTreatmentPhase.find_by(id: @product_treatment_phase.product_treatment_phase_id).update(cost: new_cost, weight: new_weight)
  #               #actualizo el cost la fase actual(fase 1)
  #               @product_treatment_phase.cost= new_cost
  #               #actualizo el cost y weight del lote de la face anterior
  #               ProductTreatmentPhase.find_by(id: @product_treatment_phase.product_treatment_phase_id).lots.update(cost: new_cost, weight: new_weight)
  #             
  #               if @product_treatment_phase.save 
  #          
  #                 Lot.create(cost: new_cost, weight: @product_treatment_phase.weight, waste: 0.0, available: 0.0, product_treatment_phase_id:@product_treatment_phase.id)
  #                 render json: @product_treatment_phase, status: :created, location: @product_treatment_phase
  #
  #               else
  # 
  #                 render json: @product_treatment_phase.errors, status: :unprocessable_entity
  #
  #               end 
  #            
  #             else  
  #               render json: { message: "El peso ingresado es mayor al del inventario" }
  #             end
  #
  #          else 
  #
  #             puts "--->>> No soy primera face <<<---"
  #             cost_phase_previous = lot.last.cost
  #             weight_phase_previous = lot.last.weight
  #            
  #             if @product_treatment_phase.weight <= weight_phase_previous
  #               #costo de la face anterior con los tratamientos 
  #  
  #               cost_phase_previous_with_treatments = ((cost_phase_previous * @product_treatment_phase.weight) + cost_treatments) /  @product_treatment_phase.weight
  #               weight_phase_previous = weight_phase_previous - @product_treatment_phase.weight
  #
  #               new_cost = cost_phase_previous_with_treatments
  #               new_weight = weight_phase_previous
  #
  #               #acutaliza el cost y weight la fase anterior 
  #               ProductTreatmentPhase.find_by(id: @product_treatment_phase.product_treatment_phase_id).update(cost: new_cost, weight: new_weight)
  #               #actualizo el cost la fase actual
  #               @product_treatment_phase.cost = new_cost
  #               #actualizo el cost y weight del lote de la face anterior
  #               ProductTreatmentPhase.find_by(id: @product_treatment_phase.product_treatment_phase_id).lots.update(cost: new_cost, weight: new_weight)
  #               #creo el lote de la fase actual
  #              
  #               if @product_treatment_phase.save  
  #
  #                 Lot.create(cost: new_cost, weight: @product_treatment_phase.weight, waste: 0.0, available: 0.0, product_treatment_phase_id:@product_treatment_phase.id)
  #                 render json: @product_treatment_phase, status: :created, location: @product_treatment_phase
  #                
  #               else
  #                 render json: @product_treatment_phase.errors, status: :unprocessable_entity
  #               end   
  #
  #             else     
  #               render json: { message: "El peso ingresado es mayor al del inventario" }
  #             end
  #
  #           end 
  #        end       
  #     end  
  #  
  #    render json: @product_treatment_phase, status: :created, location: @product_treatment_phase
  #  else
  #    render json: @product_treatment_phase.errors, status: :unprocessable_entity
  #  end
  #end   


  # PATCH/PUT /product_treatment_phases/1
  def update
    if @product_treatment_phase.update(product_treatment_phase_params)
      render json: @product_treatment_phase
    else
      render json: @product_treatment_phase.errors, status: :unprocessable_entity
    end
  end

  # DELETE /product_treatment_phases/1
  def destroy
    @product_treatment_phase.destroy
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_product_treatment_phase
      @product_treatment_phase = ProductTreatmentPhase.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def product_treatment_phase_params
      params.require(:product_treatment_phase).permit(
        :cost ,
        :weight, 
        :phase_id, 
        :product_treatment_phase_id,
        product_treatments_attributes: [ :cost, :weight, :waste, :treatment_id, :treatment_new_name ]
      )
    end
  
end
